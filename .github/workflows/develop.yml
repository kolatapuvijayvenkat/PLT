name: Deploy EB Env to Dev on Merge to Develop

on:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  create-dev-env:
    name: Create EB Environment in Dev
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2️⃣ Configure AWS Prod Account
      - name: Configure AWS Prod Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::986906625933:role/OPS_TEST_ROLE
          aws-region: us-east-1

      # 3️⃣ Export Prod EB configuration + environment details
      - name: Export Prod EB Config
        run: |
          aws elasticbeanstalk describe-configuration-settings \
            --application-name PLT \
            --environment-name PLT-env \
            > prod-config.json

      # 4️⃣ Configure AWS Dev Account
      - name: Configure AWS Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::045615335706:role/PLT_Test_Role
          aws-region: us-east-1

      # 5️⃣ Filter Prod OptionSettings and clean empty values
      - name: Prepare Dev OptionSettings
        run: |
          # Remove incompatible namespaces
          jq '[.ConfigurationSettings[0].OptionSettings[]
              | select(.Namespace != "aws:autoscaling:launchconfiguration" 
                       and .Namespace != "aws:ec2:instances"
                       and .Namespace != "aws:elasticbeanstalk:application:environment"
                       and .Namespace != "aws:elasticbeanstalk:environment:proxy"
                       and .Namespace != "aws:elasticbeanstalk:environment:process")
              | select(.Value != "" and .Value != null)
             ]' prod-config.json > dev-options.json

          echo "✅ Filtered and cleaned OptionSettings saved to dev-options.json"

          # Inject required Dev VPC / EC2 / Load Balancer settings
          jq '. + [
            { "Namespace": "aws:ec2:vpc", "OptionName": "VPCId", "Value": "vpc-03c454cc5a92417dd" },
            { "Namespace": "aws:ec2:vpc", "OptionName": "Subnets", "Value": "subnet-0edd8c30884412a52,subnet-013ec3fd994bc8942,subnet-0e9c2d65580ca821f,subnet-05c8461edb3198af0,subnet-051a3a3d50b70f069,subnet-08f611e04cb1d049f" },
            { "Namespace": "aws:ec2:vpc", "OptionName": "ELBSubnets", "Value": "subnet-0edd8c30884412a52,subnet-013ec3fd994bc8942,subnet-0e9c2d65580ca821f,subnet-05c8461edb3198af0,subnet-051a3a3d50b70f069,subnet-08f611e04cb1d049f" },
            { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "SecurityGroups", "Value": "sg-09cd3f23cbf76b02f" },
            { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "IamInstanceProfile", "Value": "aws-elasticbeanstalk-ec2-role" },
            { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "IdleTimeout", "Value": "60" },
            { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "AccessLogsS3Bucket", "Value": "elasticbeanstalk-accesslogs" },
            { "Namespace": "aws:elasticbeanstalk:environment:process:default", "OptionName": "MatcherHTTPCode", "Value": "200" }
          ]' dev-options.json > tmp.json && mv tmp.json dev-options.json

          echo "✅ Final Dev OptionSettings with required VPC/EC2/ELB settings:"
          cat dev-options.json

      # 6️⃣ Create Dev EB Environment
      - name: Create EB Environment in Dev
        run: |
          EB_ENV_NAME="dev-env-${{ github.run_number }}"
          echo "EB_ENV_NAME=$EB_ENV_NAME" >> $GITHUB_ENV

          # Get latest Node.js 22 solution stack dynamically
          LATEST_NODE_STACK=$(aws elasticbeanstalk list-available-solution-stacks \
            --query "SolutionStacks[?contains(@, 'Node.js 22')]|[0]" \
            --output text)

          if [ -z "$LATEST_NODE_STACK" ] || [ "$LATEST_NODE_STACK" = "None" ]; then
            echo "❌ No Node.js 22 solution stack found in Dev account"
            exit 1
          fi

          echo "✅ Using Solution Stack: $LATEST_NODE_STACK"
          echo "LATEST_NODE_STACK=$LATEST_NODE_STACK" >> $GITHUB_ENV

          # Create the environment
          aws elasticbeanstalk create-environment \
            --application-name PLT \
            --environment-name "$EB_ENV_NAME" \
            --solution-stack-name "$LATEST_NODE_STACK" \
            --option-settings file://dev-options.json

      # 7️⃣ Smoke Test Dev Environment
      - name: Smoke Test Dev Environment
        run: |
          echo "Waiting for environment $EB_ENV_NAME to be ready..."
          aws elasticbeanstalk wait environment-exists --environment-names "$EB_ENV_NAME"
          aws elasticbeanstalk wait environment-ready --environment-names "$EB_ENV_NAME"

          APP_URL=$(aws elasticbeanstalk describe-environments \
            --application-name PLT \
            --environment-names "$EB_ENV_NAME" \
            --query 'Environments[0].CNAME' --output text)

          echo "Testing endpoint: http://$APP_URL"
          curl -f http://$APP_URL || exit 1
