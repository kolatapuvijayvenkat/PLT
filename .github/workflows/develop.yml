name: Deploy EB Env to Dev on Merge to Develop

on:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  create-dev-env:
    name: Create EB Environment in Dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::045615335706:role/PLT_Test_Role
          aws-region: us-east-1

      - name: Prepare Dev OptionSettings
        run: |
          # Base filtered prod config
          jq '[.ConfigurationSettings[0].OptionSettings[]
              | select(.Namespace != "aws:autoscaling:launchconfiguration"
                       and .Namespace != "aws:ec2:instances"
                       and .Namespace != "aws:elasticbeanstalk:application:environment"
                       and .Namespace != "aws:elasticbeanstalk:environment:proxy"
                       and .Namespace != "aws:elasticbeanstalk:environment:process")]' \
              prod-config.json > dev-options.json

          # Hardcoded defaults for environment
          jq '. + [
              { "Namespace": "aws:ec2:vpc", "OptionName": "VPCId", "Value": "vpc-03c454cc5a92417dd" },
              { "Namespace": "aws:ec2:vpc", "OptionName": "Subnets", "Value": "subnet-0edd8c30884412a52,subnet-013ec3fd994bc8942" },
              { "Namespace": "aws:ec2:vpc", "OptionName": "ELBSubnets", "Value": "subnet-0edd8c30884412a52,subnet-013ec3fd994bc8942" },
              { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "SecurityGroups", "Value": "sg-09cd3f23cbf76b02f" },
              { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "IamInstanceProfile", "Value": "aws-elasticbeanstalk-ec2-role" },
              { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "IdleTimeout", "Value": "60" },
              { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "AccessLogsS3Bucket", "Value": "elasticbeanstalk-accesslogs" },
              { "Namespace": "aws:elasticbeanstalk:environment:process:default", "OptionName": "MatcherHTTPCode", "Value": "200" },
              { "Namespace": "aws:elasticbeanstalk:managedactions", "OptionName": "PreferredStartTime", "Value": "Sun:03:00" },
              { "Namespace": "aws:elasticbeanstalk:managedactions", "OptionName": "ManagedActionsEnabled", "Value": "true" },
              { "Namespace": "aws:elasticbeanstalk:managedactions", "OptionName": "InstanceRefreshEnabled", "Value": "true" }
          ]' dev-options.json > tmp.json && mv tmp.json dev-options.json

          echo "✅ Final Dev OptionSettings:"
          cat dev-options.json

      - name: Create EB Environment
        run: |
          EB_ENV_NAME="dev-env-${{ github.run_number }}"
          echo "EB_ENV_NAME=$EB_ENV_NAME" >> $GITHUB_ENV

          # Dynamic Node.js 22 stack
          LATEST_NODE_STACK=$(aws elasticbeanstalk list-available-solution-stacks \
            --query "SolutionStacks[?contains(@, 'Node.js 22')]|[0]" \
            --output text)

          if [ -z "$LATEST_NODE_STACK" ] || [ "$LATEST_NODE_STACK" = "None" ]; then
            echo "❌ No Node.js 22 solution stack found"
            exit 1
          fi

          echo "✅ Using Solution Stack: $LATEST_NODE_STACK"
          echo "LATEST_NODE_STACK=$LATEST_NODE_STACK" >> $GITHUB_ENV

          aws elasticbeanstalk create-environment \
            --application-name PLT \
            --environment-name "$EB_ENV_NAME" \
            --solution-stack-name "$LATEST_NODE_STACK" \
            --option-settings file://dev-options.json

      - name: Smoke Test Dev Environment
        run: |
          echo "Waiting for environment $EB_ENV_NAME to be ready..."
          aws elasticbeanstalk wait environment-exists --environment-names "$EB_ENV_NAME"
          aws elasticbeanstalk wait environment-ready --environment-names "$EB_ENV_NAME"

          APP_URL=$(aws elasticbeanstalk describe-environments \
            --application-name PLT \
            --environment-names "$EB_ENV_NAME" \
            --query 'Environments[0].CNAME' --output text)

          echo "Testing endpoint: http://$APP_URL"
          curl -f http://$APP_URL || exit 1
