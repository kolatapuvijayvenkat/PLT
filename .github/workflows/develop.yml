name: Deploy EB Env to Dev on Merge to Develop

on:
  push:
    branches:
      - develop   # Trigger only on merge/push to develop

permissions:
  id-token: write
  contents: read

jobs:
  create-dev-env:
    name: Create EB Environment in Dev
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2Ô∏è‚É£ Configure AWS Prod Account
      - name: Configure AWS Prod Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::986906625933:role/OPS_TEST_ROLE
          aws-region: us-east-1

      # 3Ô∏è‚É£ Export Prod EB configuration + environment details
      - name: Export Prod EB Config
        run: |
          aws elasticbeanstalk describe-configuration-settings \
            --application-name PLT \
            --environment-name PLT-env \
            > prod-config.json

          aws elasticbeanstalk describe-environments \
            --application-name PLT \
            --environment-names PLT-env \
            > prod-env.json

      # 4Ô∏è‚É£ Configure AWS Dev Account
      - name: Configure AWS Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::045615335706:role/PLT_Test_Role
          aws-region: us-east-1

      # 5Ô∏è‚É£ Filter Prod OptionSettings to remove SNS + incompatible settings
      - name: Prepare Dev OptionSettings
        run: |
          jq '[.ConfigurationSettings[0].OptionSettings[]
              | select((.Namespace | test("sns") | not))   # üö´ drop all SNS-related namespaces
              | select(.Namespace != "aws:autoscaling:launchconfiguration"
                       and .Namespace != "aws:ec2:instances"
                       and .Namespace != "aws:elasticbeanstalk:application:environment"
                       and .Namespace != "aws:elasticbeanstalk:environment:proxy"
                       and .Namespace != "aws:elasticbeanstalk:environment:process")
              | select(.Value != "" and .Value != null)
            ]' prod-config.json > dev-options.json

          echo "Filtered OptionSettings saved to dev-options.json"
          cat dev-options.json

          # ‚úÖ Inject Dev-specific networking + IAM
          jq '. + [
              { "Namespace": "aws:ec2:vpc", "OptionName": "VPCId", "Value": "vpc-05a2f1b85df19807c" },
              { "Namespace": "aws:ec2:vpc", "OptionName": "Subnets", "Value": "subnet-0f1f0ebfb48672ae2,subnet-0090c94d4c6b20730"},
              { "Namespace": "aws:ec2:vpc", "OptionName": "ELBSubnets", "Value": "subnet-0b48e5db951f37a13,subnet-08fbd00b27c48c757"},
              { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "SecurityGroups", "Value": "sg-017eb9b8564826a7e" },
              { "Namespace": "aws:autoscaling:launchconfiguration","OptionName": "IamInstanceProfile","Value": "aws-elasticbeanstalk-ec2-role"},
              { "Namespace": "aws:elasticbeanstalk:environment","OptionName": "ServiceRole","Value": "aws-elasticbeanstalk-service-role"},
              { "Namespace": "aws:elasticbeanstalk:managedactions","OptionName": "ServiceRoleForManagedUpdates","Value": "AWSServiceRoleForElasticBeanstalkManagedUpdates"},
              { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "IdleTimeout", "Value": "60" },
              { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "AccessLogsS3Bucket", "Value": "elasticbeanstalk-accesslogs" },
              { "Namespace": "aws:elasticbeanstalk:environment:process:default", "OptionName": "MatcherHTTPCode", "Value": "200" }
          ]' dev-options.json > tmp.json && mv tmp.json dev-options.json

          echo "‚úÖ Final Dev OptionSettings:"
          cat dev-options.json

      # 6Ô∏è‚É£ Create Dev EB Environment using latest Node.js 22 solution stack
      - name: Create EB Environment in Dev
        run: |
          EB_ENV_NAME="dev-env-${{ github.run_number }}"
          echo "EB_ENV_NAME=$EB_ENV_NAME" >> $GITHUB_ENV

          # Get latest Node.js 22 stack dynamically
          LATEST_NODE_STACK=$(aws elasticbeanstalk list-available-solution-stacks \
            --query "SolutionStacks[?contains(@, 'Node.js 22')]|[0]" \
            --output text)

          if [ -z "$LATEST_NODE_STACK" ] || [ "$LATEST_NODE_STACK" = "None" ]; then
            echo "‚ùå No Node.js 22 solution stack found in Dev account"
            exit 1
          fi

          echo "‚úÖ Using Solution Stack: $LATEST_NODE_STACK"
          echo "LATEST_NODE_STACK=$LATEST_NODE_STACK" >> $GITHUB_ENV

          # Create the Dev environment
          aws elasticbeanstalk create-environment \
            --application-name PLT \
            --environment-name "$EB_ENV_NAME" \
            --solution-stack-name "$LATEST_NODE_STACK" \
            --option-settings file://dev-options.json

      # 7Ô∏è‚É£ Smoke Test Dev Environment
      - name: Smoke Test Dev Environment
        run: |
          echo "Waiting for environment $EB_ENV_NAME to be ready..."
          aws elasticbeanstalk wait environment-exists --environment-names "$EB_ENV_NAME"
          aws elasticbeanstalk wait environment-ready --environment-names "$EB_ENV_NAME"

          APP_URL=$(aws elasticbeanstalk describe-environments \
            --application-name PLT \
            --environment-names "$EB_ENV_NAME" \
            --query 'Environments[0].CNAME' --output text)

          echo "Testing endpoint: http://$APP_URL"
          curl -f http://$APP_URL || exit 1
