name: Deploy EB Env to Dev on Merge to Develop

on:
  push:
    branches:
      - develop

permissions:
  id-token: write
  contents: read

jobs:
  create-dev-env:
    name: Create EB Environment in Dev
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Dev Account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::045615335706:role/PLT_Test_Role
          aws-region: us-east-1

      - name: Prepare Dev OptionSettings Dynamically
        run: |
          EB_ENV_NAME="dev-env-${{ github.run_number }}"
          echo "EB_ENV_NAME=$EB_ENV_NAME" >> $GITHUB_ENV

          # Get the latest Node.js 22 solution stack
          LATEST_NODE_STACK=$(aws elasticbeanstalk list-available-solution-stacks \
            --query "SolutionStacks[?contains(@, 'Node.js 22')]|[0]" \
            --output text)
          if [ -z "$LATEST_NODE_STACK" ] || [ "$LATEST_NODE_STACK" = "None" ]; then
            echo "❌ No Node.js 22 solution stack found"
            exit 1
          fi
          echo "LATEST_NODE_STACK=$LATEST_NODE_STACK" >> $GITHUB_ENV
          echo "✅ Using Solution Stack: $LATEST_NODE_STACK"

          # Get default VPC in Dev account
          VPC_ID=$(aws ec2 describe-vpcs \
            --filters Name=isDefault,Values=true \
            --query "Vpcs[0].VpcId" --output text)
          echo "VPC_ID=$VPC_ID"

          # Get subnets of the default VPC
          SUBNETS=$(aws ec2 describe-subnets \
            --filters "Name=vpc-id,Values=$VPC_ID" \
            --query "Subnets[].SubnetId" --output text | tr '\n' ',' | sed 's/,$//')
          echo "SUBNETS=$SUBNETS"

          # Get default security group of the VPC
          SECURITY_GROUP=$(aws ec2 describe-security-groups \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" \
            --query "SecurityGroups[0].GroupId" --output text)
          echo "SECURITY_GROUP=$SECURITY_GROUP"

          # Create a temp option settings file with defaults
          cat <<EOF > dev-options.json
          [
            { "Namespace": "aws:ec2:vpc", "OptionName": "VPCId", "Value": "$VPC_ID" },
            { "Namespace": "aws:ec2:vpc", "OptionName": "Subnets", "Value": "$SUBNETS" },
            { "Namespace": "aws:ec2:vpc", "OptionName": "ELBSubnets", "Value": "$SUBNETS" },
            { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "SecurityGroups", "Value": "$SECURITY_GROUP" },
            { "Namespace": "aws:autoscaling:launchconfiguration", "OptionName": "IamInstanceProfile", "Value": "aws-elasticbeanstalk-ec2-role" },
            { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "IdleTimeout", "Value": "60" },
            { "Namespace": "aws:elbv2:loadbalancer", "OptionName": "AccessLogsS3Bucket", "Value": "elasticbeanstalk-accesslogs" },
            { "Namespace": "aws:elasticbeanstalk:environment:process:default", "OptionName": "MatcherHTTPCode", "Value": "200" }
          ]
          EOF

          echo "✅ Dev OptionSettings prepared dynamically"
          cat dev-options.json

      - name: Create EB Environment in Dev
        run: |
          aws elasticbeanstalk create-environment \
            --application-name PLT \
            --environment-name "$EB_ENV_NAME" \
            --solution-stack-name "$LATEST_NODE_STACK" \
            --option-settings file://dev-options.json

      - name: Smoke Test Dev Environment
        run: |
          echo "Waiting for environment $EB_ENV_NAME to be ready..."
          aws elasticbeanstalk wait environment-exists --environment-names "$EB_ENV_NAME"
          aws elasticbeanstalk wait environment-ready --environment-names "$EB_ENV_NAME"

          APP_URL=$(aws elasticbeanstalk describe-environments \
            --application-name PLT \
            --environment-names "$EB_ENV_NAME" \
            --query 'Environments[0].CNAME' --output text)

          echo "Testing endpoint: http://$APP_URL"
          curl -f http://$APP_URL || exit 1
